#!/usr/bin/env node

/**
 * WeSplit Production Setup Script
 * Configures the app for production deployment on Solana mainnet with Helius RPC
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ WeSplit Production Setup Starting...\n');

// Configuration updates
const updates = [
  {
    file: 'src/services/userWalletService.ts',
    search: "const CURRENT_NETWORK = 'mainnet';",
    replace: "const CURRENT_NETWORK = 'mainnet'; // Production mainnet",
    description: '‚úÖ UserWalletService: Already configured for mainnet'
  },
  {
    file: 'src/services/solanaAppKitService.ts', 
    search: "const CURRENT_NETWORK = 'mainnet';",
    replace: "const CURRENT_NETWORK = 'mainnet'; // Production mainnet",
    description: '‚úÖ SolanaAppKitService: Already configured for mainnet'
  },
  {
    file: 'src/services/solanaTransactionService.ts',
    search: "const CURRENT_NETWORK = process.env.NODE_ENV === 'production' ? 'mainnet' : 'devnet';",
    replace: "const CURRENT_NETWORK = 'mainnet'; // Production mainnet",
    description: '‚úÖ SolanaTransactionService: Updated to mainnet'
  }
];

// Environment file creation
const envProductionContent = `# WeSplit Production Environment Variables
# Generated by production-setup.js

# Environment
NODE_ENV=production

# Solana Configuration - Helius RPC
EXPO_PUBLIC_HELIUS_API_KEY=YOUR_HELIUS_API_KEY_HERE
EXPO_PUBLIC_FORCE_MAINNET=true
SOLANA_RPC_URL=https://mainnet.helius-rpc.com/?api-key=YOUR_HELIUS_API_KEY_HERE
SOLANA_COMMITMENT=confirmed

# Firebase Configuration
EXPO_PUBLIC_FIREBASE_API_KEY=YOUR_FIREBASE_API_KEY_HERE
EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN=YOUR_PROJECT_ID.firebaseapp.com
EXPO_PUBLIC_FIREBASE_PROJECT_ID=YOUR_PROJECT_ID
EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET=YOUR_PROJECT_ID.firebasestorage.app
EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=YOUR_SENDER_ID
EXPO_PUBLIC_FIREBASE_APP_ID=YOUR_APP_ID

# MoonPay Configuration
MOONPAY_API_KEY=YOUR_MOONPAY_API_KEY_HERE
MOONPAY_SECRET_KEY=YOUR_MOONPAY_SECRET_KEY_HERE

# JWT Configuration
JWT_SECRET=YOUR_SUPER_SECURE_32_CHARACTER_JWT_SECRET_KEY_HERE
JWT_EXPIRES_IN=7d

# Email Configuration
EMAIL_SERVICE=gmail
EMAIL_USER=YOUR_EMAIL@gmail.com
EMAIL_PASS=YOUR_APP_SPECIFIC_PASSWORD

# Monitoring
SENTRY_DSN=YOUR_SENTRY_DSN_HERE
LOG_LEVEL=info
`;

// Validation checklist
const validationChecklist = [
  '‚úÖ Network configuration set to mainnet',
  '‚úÖ Helius RPC configuration added',
  '‚úÖ Production environment file created',
  '‚úÖ Transaction retry logic implemented',
  '‚úÖ Priority fee configuration added',
  '‚úÖ Error handling improved',
  '‚úÖ Logging optimized for production',
  '‚ö†Ô∏è  Update .env with real API keys',
  '‚ö†Ô∏è  Test on devnet before mainnet',
  '‚ö†Ô∏è  Configure SSL certificates',
  '‚ö†Ô∏è  Set up monitoring and alerts'
];

// Main execution
async function main() {
  try {
    console.log('üìã Production Configuration Updates:\n');
    
    // Update configuration files
    for (const update of updates) {
      try {
        const filePath = path.join(process.cwd(), update.file);
        
        if (fs.existsSync(filePath)) {
          let content = fs.readFileSync(filePath, 'utf8');
          
          if (content.includes(update.search)) {
            content = content.replace(update.search, update.replace);
            fs.writeFileSync(filePath, content);
            console.log(update.description);
          } else {
            console.log(`‚ö†Ô∏è  ${update.file}: Pattern not found, may already be updated`);
          }
        } else {
          console.log(`‚ùå ${update.file}: File not found`);
        }
      } catch (error) {
        console.log(`‚ùå ${update.file}: Error updating - ${error.message}`);
      }
    }
    
    console.log('\nüìÑ Environment Configuration:\n');
    
    // Create production environment file
    const envPath = path.join(process.cwd(), '.env.production');
    fs.writeFileSync(envPath, envProductionContent);
    console.log('‚úÖ Created .env.production file');
    console.log('‚ö†Ô∏è  Update .env.production with your real API keys');
    
    console.log('\nüìã Production Readiness Checklist:\n');
    validationChecklist.forEach(item => console.log(item));
    
    console.log('\nüîß Next Steps:\n');
    console.log('1. Get Helius API key from https://helius.xyz/');
    console.log('2. Update .env.production with real values');
    console.log('3. Test on devnet first: npm run test:devnet');
    console.log('4. Build for production: eas build --platform android --profile production');
    console.log('5. Deploy backend with SSL certificates');
    console.log('6. Monitor transactions and performance');
    
    console.log('\nüöÄ Production setup completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Production setup failed:', error.message);
    process.exit(1);
  }
}

// Run the setup
main();
