#!/usr/bin/env node

/**
 * Dependency Audit Script
 * Identifies unused dependencies in the WeSplit project
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Dependencies that should be removed from main package.json
const UNUSED_DEPENDENCIES = [
  '@emailjs/browser',           // Not used in frontend
  'express',                    // Should be in backend only
  'firebase-admin',             // Should be in backend only
  'firebase-functions',         // Should be in backend only
  'nodemailer',                 // Should be in backend only
  'pg',                         // Should be in backend only
  'react-native-crypto-js',     // Not used anywhere
  'react-native-linear-gradient', // Not used (expo-linear-gradient is used instead)
];

// Dependencies that should be moved to backend
const BACKEND_DEPENDENCIES = [
  'express',
  'firebase-admin',
  'firebase-functions',
  'nodemailer',
  'pg',
  'cors',
  'dotenv',
];

// Dependencies that are duplicates or redundant
const REDUNDANT_DEPENDENCIES = [
  'react-native-linear-gradient', // Using expo-linear-gradient instead
];

function readPackageJson(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`Error reading ${filePath}:`, error.message);
    return null;
  }
}

function writePackageJson(filePath, packageJson) {
  try {
    const content = JSON.stringify(packageJson, null, 2) + '\n';
    fs.writeFileSync(filePath, content);
    console.log(`✅ Updated ${filePath}`);
  } catch (error) {
    console.error(`Error writing ${filePath}:`, error.message);
  }
}

function checkDependencyUsage(dependency, srcPath) {
  try {
    // Check for import statements
    const result = execSync(`grep -r "from ['\"]${dependency}" ${srcPath} || grep -r "import.*${dependency}" ${srcPath}`, { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    return result.trim().length > 0;
  } catch (error) {
    // grep returns exit code 1 when no matches found
    return false;
  }
}

function auditDependencies() {
  console.log('🔍 Auditing WeSplit dependencies...\n');

  const mainPackagePath = path.join(__dirname, '..', 'package.json');
  const backendPackagePath = path.join(__dirname, '..', 'backend', 'package.json');
  const srcPath = path.join(__dirname, '..', 'src');

  const mainPackage = readPackageJson(mainPackagePath);
  const backendPackage = readPackageJson(backendPackagePath);

  if (!mainPackage || !backendPackage) {
    console.error('❌ Could not read package.json files');
    return;
  }

  console.log('📊 Current dependency counts:');
  console.log(`   Main package: ${Object.keys(mainPackage.dependencies || {}).length} dependencies`);
  console.log(`   Backend package: ${Object.keys(backendPackage.dependencies || {}).length} dependencies\n`);

  // Check for unused dependencies
  console.log('🔍 Checking for unused dependencies...');
  const unusedDeps = [];
  
  for (const dep of UNUSED_DEPENDENCIES) {
    if (mainPackage.dependencies && mainPackage.dependencies[dep]) {
      const isUsed = checkDependencyUsage(dep, srcPath);
      if (!isUsed) {
        unusedDeps.push(dep);
        console.log(`   ❌ ${dep} - not used in frontend`);
      } else {
        console.log(`   ✅ ${dep} - used in frontend`);
      }
    }
  }

  // Check for dependencies that should be in backend
  console.log('\n🔍 Checking for misplaced dependencies...');
  const misplacedDeps = [];
  
  for (const dep of BACKEND_DEPENDENCIES) {
    if (mainPackage.dependencies && mainPackage.dependencies[dep]) {
      misplacedDeps.push(dep);
      console.log(`   ⚠️  ${dep} - should be in backend only`);
    }
  }

  // Check for redundant dependencies
  console.log('\n🔍 Checking for redundant dependencies...');
  const redundantDeps = [];
  
  for (const dep of REDUNDANT_DEPENDENCIES) {
    if (mainPackage.dependencies && mainPackage.dependencies[dep]) {
      redundantDeps.push(dep);
      console.log(`   🔄 ${dep} - redundant (using alternative)`);
    }
  }

  // Summary
  console.log('\n📋 Summary:');
  console.log(`   Unused dependencies: ${unusedDeps.length}`);
  console.log(`   Misplaced dependencies: ${misplacedDeps.length}`);
  console.log(`   Redundant dependencies: ${redundantDeps.length}`);

  if (unusedDeps.length === 0 && misplacedDeps.length === 0 && redundantDeps.length === 0) {
    console.log('\n✅ No dependency issues found!');
    return;
  }

  // Generate cleanup script
  console.log('\n🛠️  Generating cleanup script...');
  
  const cleanupScript = `#!/bin/bash

# WeSplit Dependency Cleanup Script
# Generated by audit-dependencies.js

echo "🧹 Cleaning up WeSplit dependencies..."

# Remove unused dependencies
${unusedDeps.map(dep => `npm uninstall ${dep}`).join('\n')}

# Remove redundant dependencies  
${redundantDeps.map(dep => `npm uninstall ${dep}`).join('\n')}

# Move misplaced dependencies to backend
cd backend
${misplacedDeps.map(dep => `npm install ${dep}@${mainPackage.dependencies[dep]}`).join('\n')}
cd ..

# Remove from main package.json
${[...unusedDeps, ...misplacedDeps, ...redundantDeps].map(dep => `npm uninstall ${dep}`).join('\n')}

echo "✅ Dependency cleanup complete!"
echo "📊 Estimated bundle size reduction: ~${(unusedDeps.length + misplacedDeps.length + redundantDeps.length) * 2}MB"
`;

  const scriptPath = path.join(__dirname, 'cleanup-dependencies.sh');
  fs.writeFileSync(scriptPath, cleanupScript);
  fs.chmodSync(scriptPath, '755');

  console.log(`\n📝 Cleanup script created: ${scriptPath}`);
  console.log('🚀 Run: ./scripts/cleanup-dependencies.sh');
  
  // Show potential savings
  const totalDeps = unusedDeps.length + misplacedDeps.length + redundantDeps.length;
  console.log(`\n💰 Potential savings:`);
  console.log(`   Dependencies to remove: ${totalDeps}`);
  console.log(`   Estimated bundle size reduction: ~${totalDeps * 2}MB`);
  console.log(`   Estimated install time reduction: ~${totalDeps * 0.5} seconds`);
}

// Run the audit
auditDependencies();
